function straight_ray(
    v‚Çö‚Çí :: Float64,
    v‚Çõ‚Çí :: Float64,
    an :: Array{Float64,1},
    s  :: Array{Float64,1},
    r  :: Array{Float64,1})
    # =======================================================================
    #
    # Esta rutina calcula los tiempos de arrivo de las ondas p,ssv y ssh
    # para el modelo de weak anisotropy de thompsen.
    #
    # an[1] = œµ
    # an[2] = Œ¥
    # an[3] = Œ≥
    # ======================================================================

    œµ = an[1];
    Œ¥ = an[2];
    Œ≥ = an[3];

    dist = norm(r-s);
    # Calculate ray angle (same ray for all phases, as it is a straight ray!)
    œà‚ÇÄ = atan(norm(r[1:2]-s[1:2])/abs(r[3]-s[3])); # this one is in radians!

    # For the above ray angle, calculate the phase angle (diferent phase angles!)
    Œ∏‚ÇÄ‚Çö‚Çö = Œ∏_angle(œà‚Çö‚Çö,v‚Çö‚Çí,v‚Çõ‚Çí,œà‚ÇÄ,œµ,Œ¥,Œ≥,0.15);   # phase angle in radians
    Œ∏‚ÇÄ‚Çõ·µ• = Œ∏_angle(œà‚Çõ·µ•,v‚Çö‚Çí,v‚Çõ‚Çí,œà‚ÇÄ,œµ,Œ¥,Œ≥,0.15);   # phase angle in radians

    # theory
    # Travel times have to be calculated througth ray trayectories
    # For this, group veocity has to be calculated. Because group
    # velocities depends on phase velocities, the phase angle (to
    # evaluate phase velocities) has to be calculated by solving
    # equations: eq. 1.74 Tsvankin Book.

    # anisotropic Ray travel time (angles in radians!)
    t‚Çö‚Çö = dist/ùêï‚Çö‚Çö‚Çê(v‚Çö‚Çí,v‚Çõ‚Çí,Œ∏‚ÇÄ‚Çö‚Çö,œµ,Œ¥,Œ≥);
    t‚Çõ·µ• = dist/ùêï‚Çõ·µ•‚Çê(v‚Çö‚Çí,v‚Çõ‚Çí,Œ∏‚ÇÄ‚Çõ·µ•,œµ,Œ¥,Œ≥);
    t‚Çõ‚Çï = dist/ùêï‚Çõ‚Çï‚Çê(v‚Çö‚Çí,v‚Çõ‚Çí,œà‚ÇÄ  ,œµ,Œ¥,Œ≥); # this one is on group angle! eq.1.69 Tsvankin

    return t‚Çö‚Çö,t‚Çõ·µ•,t‚Çõ‚Çï;
end #straight_ray
